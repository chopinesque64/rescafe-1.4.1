/* $Header: /home/gbsmith/projects/ResCafe/ResCafe1.4/src/RCS/MacStandard256Palette.java,v 1.6 1999/12/19 01:29:21 gbsmith Exp $ */

import java.awt.image.IndexColorModel;

/*=======================================================================*/
/*
 * $Log: MacStandard256Palette.java,v $
 * Revision 1.6  1999/12/19 01:29:21  gbsmith
 * Added an additional transparent entry in hopes of applying
 * the mask bitmap to make XPMs with transparency.
 *
 * Revision 1.5  1999/10/21 23:06:52  gbsmith
 * Added Copyright notice.
 *
 * Revision 1.4  1999/10/17 23:01:42  gbsmith
 * Added 'getColorModel' method that will construct an IndexColorModel
 * for the user
 *
 * Revision 1.3  1999/10/13 07:55:07  gbsmith
 * Made class public
 *
 * Revision 1.2  1999/10/04 21:21:16  gbsmith
 * Added some comments.
 *
 * Revision 1.1  1999/09/30 05:25:14  gbsmith
 * Initial revision
 *
 */

/*=======================================================================*/
/* Copyright (c) 1999 by G. Brannon Smith -- All Rights Reserved         */
/*=======================================================================*/

/*=======================================================================*/
public class MacStandard256Palette
{
   /*--- RCS ------------------------------------------------------------*/
   static final String rcsid = "$Id: MacStandard256Palette.java,v 1.6 1999/12/19 01:29:21 gbsmith Exp $";

   /*--- Data -----------------------------------------------------------*/
   static private final byte reds[] =
   { -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
     -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
     -1,-1,-1,-1,-52,-52,-52,-52,-52,-52,-52,-52,-52,-52,-52,-52,
     -52,-52,-52,-52,-52,-52,-52,-52,-52,-52,-52,-52,-52,-52,-52,-52,
     -52,-52,-52,-52,-52,-52,-52,-52,-103,-103,-103,-103,-103,-103,-103,-103,
     -103,-103,-103,-103,-103,-103,-103,-103,-103,-103,-103,-103,-103,-103,-103,-103,
     -103,-103,-103,-103,-103,-103,-103,-103,-103,-103,-103,-103,102,102,102,102,
     102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,
     102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,
      51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51,
      51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51,
      51, 51, 51, 51,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
       0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
       0,  0,  0,  0,  0,  0,  0,-18,-35,-69,-86,-120,119, 85, 68, 34,
      17,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
       0,  0,  0,  0,  0,-18,-35,-69,-86,-120,119, 85, 68, 34, 17,  0,
     0 };

   static private final byte greens[] =
   { -1,-1,-1,-1,-1,-1,-52,-52,-52,-52,-52,-52,-103,-103,-103,-103,
     -103,-103,102,102,102,102,102,102, 51, 51, 51, 51, 51, 51,  0,  0,
       0,  0,  0,  0,-1,-1,-1,-1,-1,-1,-52,-52,-52,-52,-52,-52,
     -103,-103,-103,-103,-103,-103,102,102,102,102,102,102, 51, 51, 51, 51,
      51, 51,  0,  0,  0,  0,  0,  0,-1,-1,-1,-1,-1,-1,-52,-52,
     -52,-52,-52,-52,-103,-103,-103,-103,-103,-103,102,102,102,102,102,102,
      51, 51, 51, 51, 51, 51,  0,  0,  0,  0,  0,  0,-1,-1,-1,-1,
     -1,-1,-52,-52,-52,-52,-52,-52,-103,-103,-103,-103,-103,-103,102,102,
     102,102,102,102, 51, 51, 51, 51, 51, 51,  0,  0,  0,  0,  0,  0,
     -1,-1,-1,-1,-1,-1,-52,-52,-52,-52,-52,-52,-103,-103,-103,-103,
     -103,-103,102,102,102,102,102,102, 51, 51, 51, 51, 51, 51,  0,  0,
       0,  0,  0,  0,-1,-1,-1,-1,-1,-1,-52,-52,-52,-52,-52,-52,
     -103,-103,-103,-103,-103,-103,102,102,102,102,102,102, 51, 51, 51, 51,
      51, 51,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
       0,-18,-35,-69,-86,-120,119, 85, 68, 34, 17,  0,  0,  0,  0,  0,
       0,  0,  0,  0,  0,-18,-35,-69,-86,-120,119, 85, 68, 34, 17,  0,
     0 };

   static private final byte blues[] =
   { -1,-52,-103,102, 51,  0,-1,-52,-103,102, 51,  0,-1,-52,-103,102,
      51,  0,-1,-52,-103,102, 51,  0,-1,-52,-103,102, 51,  0,-1,-52,
     -103,102, 51,  0,-1,-52,-103,102, 51,  0,-1,-52,-103,102, 51,  0,
     -1,-52,-103,102, 51,  0,-1,-52,-103,102, 51,  0,-1,-52,-103,102,
      51,  0,-1,-52,-103,102, 51,  0,-1,-52,-103,102, 51,  0,-1,-52,
     -103,102, 51,  0,-1,-52,-103,102, 51,  0,-1,-52,-103,102, 51,  0,
     -1,-52,-103,102, 51,  0,-1,-52,-103,102, 51,  0,-1,-52,-103,102,
      51,  0,-1,-52,-103,102, 51,  0,-1,-52,-103,102, 51,  0,-1,-52,
     -103,102, 51,  0,-1,-52,-103,102, 51,  0,-1,-52,-103,102, 51,  0,
     -1,-52,-103,102, 51,  0,-1,-52,-103,102, 51,  0,-1,-52,-103,102,
      51,  0,-1,-52,-103,102, 51,  0,-1,-52,-103,102, 51,  0,-1,-52,
     -103,102, 51,  0,-1,-52,-103,102, 51,  0,-1,-52,-103,102, 51,  0,
     -1,-52,-103,102, 51,  0,-1,-52,-103,102, 51,  0,-1,-52,-103,102,
      51,  0,-1,-52,-103,102, 51,  0,  0,  0,  0,  0,  0,  0,  0,  0,
       0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,-18,-35,-69,-86,-120,
     119, 85, 68, 34, 17,-18,-35,-69,-86,-120,119, 85, 68, 34, 17,  0,
     0 };

   static private final int alpha = 256;

   /*--- Methods --------------------------------------------------------*/
   public static byte[] getReds()   { return reds;   }
   public static byte[] getGreens() { return greens; }
   public static byte[] getBlues()  { return blues;  }

   public static IndexColorModel getColorModel()
   {
      return new IndexColorModel(8, 257, reds, greens, blues, alpha );
   }
}


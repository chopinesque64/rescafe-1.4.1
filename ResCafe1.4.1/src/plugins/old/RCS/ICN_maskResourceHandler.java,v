head	1.3;
access;
symbols;
locks; strict;
comment	@# @;


1.3
date	99.10.21.21.24.20;	author gbsmith;	state Exp;
branches;
next	1.2;

1.2
date	99.10.04.22.00.05;	author gbsmith;	state Exp;
branches;
next	1.1;

1.1
date	99.09.30.05.21.35;	author gbsmith;	state Exp;
branches;
next	;


desc
@@


1.3
log
@Added Copyright notice. Made class imports more explicit.
@
text
@/* $Header: /home/gbsmith/projects/MacResReader/ResCafe/src/plugins/RCS/ICN_maskResourceHandler.java,v 1.2 1999/10/04 22:00:05 gbsmith Exp gbsmith $ */

import com.sun.jimi.core.Jimi; //  JIMI - tools for image I/O

import javax.swing.JList;
import javax.swing.JScrollPane;
import javax.swing.JTable;

import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableCellRenderer;
import javax.swing.table.TableColumn;

import java.awt.BorderLayout;
import java.awt.Image;

import java.awt.image.IndexColorModel;
import java.awt.image.MemoryImageSource;

import java.io.File;

import ResourceManager.*;

/*=======================================================================*/
/*
 * $Log: ICN_maskResourceHandler.java,v $
 * Revision 1.2  1999/10/04 22:00:05  gbsmith
 * Added save method and adapted to new init technique.
 */

/*=======================================================================*/
/* Copyright (c) 1999 by G. Brannon Smith -- All Rights Reserved         */
/*=======================================================================*/

/*=======================================================================*/
public class ICN_maskResourceHandler extends MacResourceHandler
{
   /*--- Data -----------------------------------------------------------*/
   JList resList;
   JTable resTable;
   private static final String[] columnNames = {
      "ResID", "Name", "Size", "Icon", "Mask" };
   IndexColorModel icm;
   Image icons[];
   Image masks[];
   TableCellRenderer renderer = new IconRenderer();

   /*------ RCS ---------------------------------------------------------*/
   static final String rcsid = "$Id: ICN_maskResourceHandler.java,v 1.2 1999/10/04 22:00:05 gbsmith Exp gbsmith $";

   /*--- Methods --------------------------------------------------------*/
   public String[] getTypes()
   {
      return new String[]{"ICN#"};
   }

   /*--------------------------------------------------------------------*/
   public void init( )
   {
      int i, j, b;
      MemoryImageSource mis;
      TableColumn tc;
      byte rawData[];
      byte iconData[];
      byte maskData[];

      Resource myResArray[] = resData.getResArray();

      icm = MacStandard16Palette.getColorModel();

      icons = new Image[myResArray.length];
      masks = new Image[myResArray.length];

      for( i = 0; i < myResArray.length; i++)
      {
         rawData = myResArray[i].getData();

         // Grab icon data
         iconData = new byte[1024];
         for ( j = 0; j < 128; j++)
            for ( b = 0; b < 8; b++)
               iconData[j*8+b] = (byte)((rawData[j] &
                                        (0x80 >>> b)) > 0? 0x0F: 0x00);

         mis = new MemoryImageSource(32, 32, icm, iconData, 0, 32);
         icons[i] = createImage(mis);

         // Grab mask data
         maskData = new byte[1024];
         for ( j = 0; j < 128; j++)
            for ( b = 0; b < 8; b++)
               maskData[j*8+b] = (byte)((rawData[j + 128] &
                                        (0x80 >>> b)) > 0? 0xFF: 0x00);

         mis = new MemoryImageSource(32, 32, icm, maskData, 0, 32);
         masks[i] = createImage(mis);
      }
   }

   /*--------------------------------------------------------------------*/
   public void display( )
   {
      int i, j, b;
      MemoryImageSource mis;
      TableColumn tc;
      DefaultTableModel tmpModel;

      Resource myResArray[] = resData.getResArray();

      setLayout(new BorderLayout());
      tmpModel = new DefaultTableModel(columnNames, myResArray.length);

      for( i = 0; i < myResArray.length; i++)
      {
         tmpModel.setValueAt(new Short(myResArray[i].getID()),  i, 0);
         tmpModel.setValueAt(myResArray[i].getName(),           i, 1);
         tmpModel.setValueAt(new Integer(myResArray[i].size()), i, 2);
         tmpModel.setValueAt(icons[i], i, 3);
         tmpModel.setValueAt(masks[i], i, 4);
      }

      resTable = new JTable(tmpModel);
      resTable.setRowHeight(36);
      tc = resTable.getColumn("Icon");
      tc.setCellRenderer(renderer);

      tc = resTable.getColumn("Mask");
      tc.setCellRenderer(renderer);

      JScrollPane rtsp = new JScrollPane(resTable);
      add(rtsp, "Center");
   }

   /*--------------------------------------------------------------------*/
   public void save ( File savedir )
   {
      StringBuffer tmpfilename;
      String filename;
      String saveType;

      if(resData == null)
      {
         System.err.println("ERROR: No resources to save");
         return;
      }

      Resource myResArray[] = resData.getResArray();
      saveType = resData.getID();

      System.out.println("Saving resources of type \'" + saveType + "\'");
      // Icons
      for(int i=0; i < myResArray.length; i++)
      {
         tmpfilename = new StringBuffer( savedir.getPath() );
         tmpfilename.append( File.separator + myResArray[i].getID() );
         if(myResArray[i].getName() != null)
            tmpfilename.append("_" + myResArray[i].getName());
         tmpfilename.append(".xpm");
         filename = tmpfilename.toString().replace(' ', '_');
         //System.out.println("\tSaving \'" + filename + "\'...");

         try
         {
            Jimi.putImage(icons[i], filename);
         } catch (Exception whatever) {
            System.err.println("ERROR: Got exception " + whatever );
         }
      }

      // Masks
      for(int i=0; i < myResArray.length; i++)
      {
         tmpfilename = new StringBuffer(savedir.getPath());
         tmpfilename.append( File.separator + myResArray[i].getID() );
         if(myResArray[i].getName() != null)
            tmpfilename.append("_" + myResArray[i].getName());
         tmpfilename.append("_mask");
         tmpfilename.append(".xpm");
         filename = tmpfilename.toString().replace(' ', '_');
         //System.out.println("\tSaving \'" + filename + "\'...");

         try
         {
            Jimi.putImage(masks[i], filename);
         } catch (Exception whatever) {
            System.err.println("ERROR: Got exception " + whatever );
         }
      }
   }
}
@


1.2
log
@Added save method and adapted to new init technique.
@
text
@d1 11
a11 1
/* $Header$ */
a12 3
import com.sun.jimi.core.*; // JIMI - tools for image I/O
import javax.swing.*;
import javax.swing.table.*;
d15 4
a18 1
import java.awt.image.*;
d25 3
a27 2
 * $Log$
 *
d30 3
d48 1
a48 1
   static final String rcsid = "$Id$";
d51 1
a51 1
   public ICN_maskResourceHandler()
d53 1
a53 1
      types = new String[]{"ICN#"};
d57 1
a57 1
   public void init(String inType, ResourceType inResData )
d66 1
a66 1
      resdata = inResData;
d68 1
a68 7
      Resource myResArray[] = resdata.getResArray();

      setLayout(new BorderLayout());
      icm = new IndexColorModel(8, 16,
                                MacStandard16Palette.getReds(),
                                MacStandard16Palette.getGreens(),
                                MacStandard16Palette.getBlues());
a72 3
      DefaultTableModel tmpModel =
         new DefaultTableModel(columnNames, myResArray.length);

a74 4
         tmpModel.setValueAt(new Short(myResArray[i].getID()),  i, 0);
         tmpModel.setValueAt(myResArray[i].getName(),           i, 1);
         tmpModel.setValueAt(new Integer(myResArray[i].size()), i, 2);

a85 1
         tmpModel.setValueAt(icons[i], i, 3);
d96 22
d134 1
a134 1
   public void save ( String inType, File savedir )
d138 1
d140 1
a140 1
      if(resdata == null)
d142 1
a142 2
         System.err.println("ERROR: No resources of type \'" + inType +
                            "\' to save");
d146 2
a147 1
      Resource myResArray[] = resdata.getResArray();
d149 1
a149 1
      System.out.println("Saving resources of type \'" + inType + "\'");
d153 1
a153 1
         tmpfilename = new StringBuffer(savedir.getPath());
@


1.1
log
@Initial revision
@
text
@d3 1
d6 2
a7 1
import java.awt.*;
d9 1
d11 1
d13 1
d16 1
d23 1
a23 3
   private static String types[] = {"ICN#"};

   Resource resdata[];
d26 2
a27 1
   private static final String[] columnNames = { "ResID", "Name", "Size", "Icon", "Mask"};
d33 9
d43 1
a43 1
   public void init( String inType, Resource inResData[] )
d53 3
d62 2
a63 2
      icons = new Image[resdata.length];
      masks = new Image[resdata.length];
d66 1
a66 1
         new DefaultTableModel(columnNames, resdata.length);
d68 1
a68 1
      for( i = 0; i < resdata.length; i++)
d70 3
a72 3
         tmpModel.setValueAt(new Short(resdata[i].getID()),  i, 0);
         tmpModel.setValueAt(resdata[i].getName(),           i, 1);
         tmpModel.setValueAt(new Integer(resdata[i].size()), i, 2);
d74 1
a74 1
         rawData = resdata[i].getData();
d109 56
@
